{
  "title": "Переменные",
  "content": [
    {
      "type": "text",
      "value": "**Kotlin** и **Java** строго типизированные языки. Это значит, что во время компиляции должно быть понятно какого типа переменная."
    },
    {
      "type": "text",
      "value": "В **kotlin** нет примитивных типов. Все типы в **kotlin** являются **ссылочными** (т.е. какими-то классами). В **java** есть примитивные типы и их ссылочные аналоги (оболочки типов)."
    },
    {
      "type": "text",
      "value": "В Kotlin переменные объявляются с помощью двух ключевых слов:\n\n`val` **(от value)** — неизменяемая переменная (аналог **final** в Java).\n\n`var` **(от variable)** — изменяемая переменная."
    },
    {
      "type": "text",
      "value": "В Java (и многих других языках) любая переменная ссылочного типа может быть **null**, и попытка вызвать метод или обратиться к полю такого объекта приводит к NullPointerException.\n\nВ Kotlin такая ситуация предотвращается на этапе компиляции."
    },
    {
      "type": "text",
      "value": "Kotlin разделяет типы на:\n\n`Non-Null (Type)` — гарантированно не **null**.\n\n`Nullable (Type?)` — может быть **null**."
    },
    {
      "type": "text",
      "value": "Как работать с `Nullable`-переменными?\n\n- Проверка на **null** (Smart Cast)\n\nKotlin автоматически приводит тип к **non-null** после проверки:"
    },
    {
      "type": "code",
      "language": "kotlin",
      "value": "fun printLength(text: String?) {\n    if (text != null) {\n        println(text.length)  // Smart Cast: text теперь String\n    }\n}"
    },
    {
      "type": "text",
      "value": "- Безопасный вызов (`?`. — **Safe Call Operator**)\n\nЕсли объект **null**, метод не выполняется, а возвращается **null**:"
    },
    {
      "type": "code",
      "language": "kotlin",
      "value": "val name: String? = null\nprintln(name?.length)  // Выведет null (без NPE)"
    },
    {
      "type": "text",
      "value": "- Оператор утверждения (`!!` — **Not-Null Assertion**)\n\nГарантирует, что объект не **null** (выбрасывает **NPE**, если это не так):"
    },
    {
      "type": "code",
      "language": "kotlin",
      "value": "val name: String? = null\nprintln(name!!.length)  // NPE, если name == null"
    },
    {
      "type": "text",
      "value": "- Элвис-оператор (`?:` — **Elvis Operator**)\n\nПозволяет задать значение по умолчанию, если объект **null**:"
    },
    {
      "type": "code",
      "language": "kotlin",
      "value": "val name: String? = null\nval length = name?.length ?: 0  // Если name == null, то length = 0"
    },
    {
      "type": "text",
      "value": "- Безопасное приведение (`as?` — **Safe Cast**)\n\nПытается привести тип, возвращает **null** при неудаче:"
    },
    {
      "type": "code",
      "language": "kotlin",
      "value": "val obj: Any = \"Kotlin\"\nval num: Int? = obj as? Int  // null (не Int)"
    }
  ]
}